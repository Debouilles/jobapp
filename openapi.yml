openapi: 3.0.3

info:
  version: "1.0.0"
  title: "jobapp - OpenAPI"
  description: "API for jobapp"
  tags:
  - name: auth
    description: toutes les infos sur le login
  - name: rdvs
    description: toutes les infos sur les rdvs
  - name: services
    description: toutes les infos sur les services proposés
  - name: users
    description: toutes les infos sur nos utilisateurs
  - name: login
    description: permet à l'utilisateur de se connecter

servers:
  - url: https://jobapp.onrender.com
paths:
######## LOGIN
  /login/:
    post:
      tags: 
      - login
      summary: Se connecter
      description: se connecter
      operationId: addLogin
      requestBody:
        description: Ajouter un nouveau login
        content:
          application/json:
            schema:
              title: successful response
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/name'
                email:
                  $ref: '#/components/schemas/email'
                password:
                  $ref: '#/components/schemas/password'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                example: Welcome Taya Licorne!
        '401':
          description: Authorization header is missing
          content:
            application/json:
              schema:
                example: Authorization header is missing
        '405':
          description: Invalid input

######## RDVS
  /rdvs/:
    get:
      tags: 
      - rdvs
      summary: Chercher tous les rdvs
      description: Un rdv est créé quand un user provider propose un service et un user reciever valide le service. Créant ainsi un rdv unique identifiable avec son id
      operationId: GetRdvs
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                title: successful response
                type: array
                items: 
                  type: object
                  properties:
                    _id:
                      title: _id
                      type: string
                      example: 637512518cdb7960acf1ae2a
                    relatedService:
                      title: relatedService
                      type: object
                      properties:
                        location:
                          $ref: '#/components/schemas/location'
                        _id:
                          title: _id
                          type: string
                          example: 6373831d8d8224f8daa6ac73
                        titre:
                          title: _id
                          type: string
                          example: Check
                        type:
                          title: _id
                          type: string
                          example: Autres
                        date:
                          title: _id
                          type: date
                          example: 2022-02-04T00:00:00.000Z
                        provider:
                          title: _id
                          type: string
                          example: 6370fdc0f1ba534053028507
                        createdAt:
                          title: _id
                          type: date
                          example: 2022-11-15T12:16:29.894Z
                        updatedAt:
                          title: _id
                          type: date
                          example: 2022-11-15T12:16:29.894Z
                    provider:
                      title: provider
                      type: object
                      properties:
                        _id:
                          $ref: '#/components/schemas/user_id'
                        name:
                          $ref: '#/components/schemas/name'
                        email:
                          $ref: '#/components/schemas/email'
                    reciever:
                      title: provider
                      type: object
                      properties:
                        _id:
                          $ref: '#/components/schemas/user_id'
                        name:
                          $ref: '#/components/schemas/name'
                        email:
                          $ref: '#/components/schemas/email'
                    isAccepted:
                      title: isAccepted
                      type: boolean
                      example: true
        '400':
          description: if resultReciever._id.equals(resultProvider.provider)
          content:
            text/plain:
              schema:
                title: conflit users
                type: string
                example: The provider and the reciever can't be the same person
        '404':
          description: Not found response
          content:
            text/plain:
              schema:
                title: Users not found
                type: string
                example: Not found
          
    post:
      tags: 
      - rdvs
      summary: Ajouter un nouveau rdv 
      description: ça ajoute un nouveau rdv quand le user reciever accepte un service
      operationId: addRdv
      requestBody:
        description: Objet rdv créé
        content:
          application/json:
            schema:
              properties:
                _id:
                  title: _id
                  type: string
                  example: 637512518cdb7960acf1ae2a
                relatedService:
                  title: relatedService
                  type: object
                  properties:
                    location:
                      $ref: '#/components/schemas/location'
                    _id:
                      title: _id
                      type: string
                      example: 6373831d8d8224f8daa6ac73
                    titre:
                      title: _id
                      type: string
                      example: Check
                    type:
                      title: _id
                      type: string
                      example: Autres
                    date:
                      title: _id
                      type: date
                      example: 2022-02-04T00:00:00.000Z
                    provider:
                      title: _id
                      type: string
                      example: 6370fdc0f1ba534053028507
                    createdAt:
                      title: _id
                      type: date
                      example: 2022-11-15T12:16:29.894Z
                    updatedAt:
                      title: _id
                      type: date
                      example: 2022-11-15T12:16:29.894Z
                provider:
                  title: provider
                  type: object
                  properties:
                    _id:
                      $ref: '#/components/schemas/user_id'
                    name:
                      $ref: '#/components/schemas/name'
                    email:
                      $ref: '#/components/schemas/email'
                reciever:
                  title: provider
                  type: object
                  properties:
                    _id:
                      $ref: '#/components/schemas/user_id'
                    name:
                      $ref: '#/components/schemas/name'
                    email:
                      $ref: '#/components/schemas/email'
                isAccepted:
                  title: isAccepted
                  type: boolean
                  example: true
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  _id:
                    title: _id
                    type: string
                    example: 637512518cdb7960acf1ae2a
                  relatedService:
                    title: relatedService
                    type: object
                    properties:
                      location:
                        $ref: '#/components/schemas/location'
                      _id:
                        title: _id
                        type: string
                        example: 6373831d8d8224f8daa6ac73
                      titre:
                        title: _id
                        type: string
                        example: Check
                      type:
                        title: _id
                        type: string
                        example: Autres
                      date:
                        title: _id
                        type: date
                        example: 2022-02-04T00:00:00.000Z
                      provider:
                        title: _id
                        type: string
                        example: 6370fdc0f1ba534053028507
                      createdAt:
                        title: _id
                        type: date
                        example: 2022-11-15T12:16:29.894Z
                      updatedAt:
                        title: _id
                        type: date
                        example: 2022-11-15T12:16:29.894Z
                  provider:
                    title: provider
                    type: object
                    properties:
                      _id:
                        $ref: '#/components/schemas/user_id'
                      name:
                        $ref: '#/components/schemas/name'
                      email:
                        $ref: '#/components/schemas/email'
                  reciever:
                    title: provider
                    type: object
                    properties:
                      _id:
                        $ref: '#/components/schemas/user_id'
                      name:
                        $ref: '#/components/schemas/name'
                      email:
                        $ref: '#/components/schemas/email'
                  isAccepted:
                    title: isAccepted
                    type: boolean
                    example: true
        '405':
          description: Invalid input
    delete:
      tags:
      - rdvs
      summary: Delete un rdv
      description: Un rdv est créé quand un user provider propose un service et un user reciever valide le service. Créant ainsi un rdv unique identifiable avec son id
      operationId: DeleteRDV   
######## SERVICES
  /services/:
    get:
      tags:
      - services
      summary: Chercher tous les services
      description: Un service est mis en ligne par un user provider et est défini par son identifiant unique. Dedans on trouvera sa localisation, un titre (nom du service), son type et l'id de l'user provider.
      operationId: GetServices
      parameters:
      - name: idProvider
        in: query #header, path, query, cookie
        description: l'id de l'utilisateur qui a mis en ligne le service
        required: false
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                title: successful response
                type: object
                properties:
                  location:
                    $ref: '#/components/schemas/location'
                  _id:
                    $ref: '#/components/schemas/user_id'
                  titre:
                    $ref: '#/components/schemas/titre'
                  type:
                    $ref: '#/components/schemas/type'
                  date:
                    $ref: '#/components/schemas/date'
                  provider:
                    title: provider
                    type: string
                    example: 6370fdc0f1ba534053028507
                  createdAt:
                    title: createdAt
                    type: date
                    example: 2022-11-15T12:16:49.910Z
                  updatedAt:
                    title: updatedAt
                    type: date
                    example: 2022-11-15T12:16:49.910Z
        '404':
          description: Not found response
          content:
            text/plain:
              schema:
                title: Users not found
                type: string
                example: Not found
    post:
      tags:
      - services
      summary: Ajouter un nouveau service 
      description: Un user ajoute un nouveau service en indicant la date(+heure), l'endroit, un titre et le type de service.
      operationId: addService
      requestBody:
        description: Ajouter un nouveau service
        content:
          application/json:
            schema:
              title: successful response
              type: object
              properties:
                location:
                  $ref: '#/components/schemas/location'
                _id:
                  $ref: '#/components/schemas/user_id'
                titre:
                  $ref: '#/components/schemas/titre'
                type:
                  $ref: '#/components/schemas/type'
                date:
                  $ref: '#/components/schemas/date'
                provider:
                  title: provider
                  type: string
                  example: 6370fdc0f1ba534053028507
                createdAt:
                  title: createdAt
                  type: date
                  example: 2022-11-15T12:16:49.910Z
                updatedAt:
                  title: updatedAt
                  type: date
                  example: 2022-11-15T12:16:49.910Z
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                title: successful response
                type: object
                properties:
                  location:
                    $ref: '#/components/schemas/location'
                  _id:
                    $ref: '#/components/schemas/user_id'
                  titre:
                    $ref: '#/components/schemas/titre'
                  type:
                    $ref: '#/components/schemas/type'
                  date:
                    $ref: '#/components/schemas/date'
                  provider:
                    title: provider
                    type: string
                    example: 6370fdc0f1ba534053028507
                  createdAt:
                    title: createdAt
                    type: date
                    example: 2022-11-15T12:16:49.910Z
                  updatedAt:
                    title: updatedAt
                    type: date
                    example: 2022-11-15T12:16:49.910Z  
        '405':
          description: Invalid input
  /services/{id}:
    get:
      get:
      tags:
      - services
      summary: Cherche un service
      description: Trouver un service par son identifiant
      operationId: GetServiceId
      parameters:
      - name: id
        in: path #header, path, query, cookie
        description: l'id du service
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                title: successful response
                type: object
                properties:
                  location:
                    $ref: '#/components/schemas/location'
                  _id:
                    $ref: '#/components/schemas/user_id'
                  titre:
                    $ref: '#/components/schemas/titre'
                  type:
                    $ref: '#/components/schemas/type'
                  date:
                    $ref: '#/components/schemas/date'
                  provider:
                    title: provider
                    type: object
                    properties:
                      _id:
                        title: _id
                        type: string
                        example: 6370fdc0f1ba534053028507
                      name:
                        name: name
                        type: string
                        example: Roja
                      email:
                        title: email
                        type: string
                        example: roja@gmail.com
                  createdAt:
                    title: createdAt
                    type: date
                    example: 2022-11-15T12:16:49.910Z
                  updatedAt:
                    title: updatedAt
                    type: date
                    example: 2022-11-15T12:16:49.910Z
        '404':
          description: Not found response
          content:
            text/plain:
              schema:
                title: Users not found
                type: string
                example: Not found
    delete:
      tags:
        - services
      summary: Supprimer un service
      description: Supprimer un service
      operationId: deleteService
      parameters:
        - name: _id
          in: path
          description: Identifiant du service à supprimer
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid service value
    put:
      tags:
      - services
      summary: Update un service
      description: Mettre à jour un service selon son identifiant
      operationId: UpdateService
      parameters:
        - name: _id
          in: path
          description: L'identifiant unique
          required: true
          schema:
            type: string
      requestBody:
        description: Mettre à jour un service déjà existant
        content:
            application/json:
              schema:
                title: successful response
                type: object
                properties:
                  location:
                    $ref: '#/components/schemas/location'
                  _id:
                    $ref: '#/components/schemas/user_id'
                  titre:
                    $ref: '#/components/schemas/titre'
                  type:
                    $ref: '#/components/schemas/type'
                  date:
                    $ref: '#/components/schemas/date'
                  provider:
                    title: provider
                    type: object
                    properties:
                      _id:
                        title: _id
                        type: string
                        example: 6370fdc0f1ba534053028507
                      name:
                        name: name
                        type: string
                        example: Roja
                      email:
                        title: email
                        type: string
                        example: roja@gmail.com
                  createdAt:
                    title: createdAt
                    type: date
                    example: 2022-11-15T12:16:49.910Z
                  updatedAt:
                    title: updatedAt
                    type: date
                    example: 2022-11-15T12:16:49.910Z
      responses:
        default:
          description: successful operation
        '401':
          description: 'Error: Unauthorized'
          content:
            text/plain:
              schema:
                title: 'Error: Unauthorized'
                type: string
                example: Authorization header is missing

######## USERS
  /users/:
    get:
      tags:
      - users
      summary: Chercher tous les utilisateurs
      description: Ici on trouve tous les utilisateurs avec leur identifiant unique, un nom, un email, et le mot de passe hashé
      operationId: GetUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                title: successful response
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      $ref: '#/components/schemas/user_id'
                    name:
                      $ref: '#/components/schemas/name'
                    email:
                      $ref: '#/components/schemas/email'
                    password:
                      $ref: '#/components/schemas/password'
        '404':
          description: Not found response
          content:
            text/plain:
              schema:
                title: Users not found
                type: string
                example: Not found
    post:
      tags:
      - users
      summary: Ajouter un nouvel utilisateur
      description: Un utilisateur est ajouté
      operationId: addUser
      requestBody:
        description: Ajouter un nouvel utilisateur
        content:
          application/json:
            schema:
              title: successful response
              type: object
              properties:
                _id:
                  $ref: '#/components/schemas/user_id'
                name:
                  $ref: '#/components/schemas/name'
                email:
                  $ref: '#/components/schemas/email'
                password:
                  $ref: '#/components/schemas/password'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                title: successful response
                type: object
                properties:
                  _id:
                    $ref: '#/components/schemas/user_id'
                  name:
                    $ref: '#/components/schemas/name'
                  email:
                    $ref: '#/components/schemas/email'
                  password:
                    $ref: '#/components/schemas/password'
        '405':
          description: Invalid input
  

  /users/{_id}:
    get:
      tags:
      - users
      summary: Trouver un user avec son id
      description: Trouver un user avec son id
      operationId: FindUserId
      parameters:
        - $ref: '#/components/parameters/_id_path'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                title: successful response
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      $ref: '#/components/schemas/user_id'
                    name:
                      $ref: '#/components/schemas/name'
                    email:
                      $ref: '#/components/schemas/email'
                    password:
                      $ref: '#/components/schemas/password'
        '404':
          description: Not found response
          content:
            text/plain:
              schema:
                title: Users not found
                type: string
                example: Not found
    patch:
      tags:
        - users
      summary: Update un utilisateur
      description: Cela ne peut être fait que par l'utilisateur connecté.
      operationId: updateUser
      parameters:
        - name: _id
          in: path
          description: _id pour identifier l'utilisateur
          required: true
          schema:
            type: string
      requestBody:
        description: Mettre à jour un utilisateur déjà existant
        content:
            application/json:
              schema:
                title: successful response
                type: object
                properties:
                  _id:
                    $ref: '#/components/schemas/user_id'
                  name:
                    $ref: '#/components/schemas/name'
                  email:
                    $ref: '#/components/schemas/email'
                  password:
                    $ref: '#/components/schemas/password'
      responses:
        default:
          description: successful operation
        '401':
          description: 'Error: Unauthorized'
          content:
            text/plain:
              schema:
                title: 'Error: Unauthorized'
                type: string
                example: Authorization header is missing
    delete:
      tags:
        - users
      summary: Supprimer un utilisateur
      description: Supprimer un utilisateur
      operationId: deleteUser
      parameters:
        - name: _id
          in: path
          description: L'identifiant de l'utilisateur à supprimer
          required: true
          schema:
            type: string
      responses:
        '403':
          description: Insufficient permissions
          content:
            text/plain:
              schema:
                title: Insufficient permissions
                type: string
                example: Insufficient permissions
        '404':
          descriction: 
          description: No access
          content:
            text/plain:
              schema:
                title: You don't have the permissions to access this data
                type: string
                example: You don't have the permissions to access this data
    
######## components
components:
  parameters:
    _id_path:
      name: _id
      in: path #header, path, query, cookie
      description: L'identifiant unique
      required: true
      schema:
        type: string
    name:
      name: name
      in: header #header, path, query, cookie
      description: Nom de l'utilisateur
      required: false
      schema:
        type: string
    email:
      name: email
      in: header #header, path, query, cookie
      description: Email de l'utilisateur
      required: false
      schema:
        type: string
    password:
      name: password
      in: header #header, path, query, cookie
      description: L'identifiant unique de l'utilisateur
      required: false
      schema:
        type: string
        #qqch de spécial ici?
    location:
      name: location
      in: header 
      description: La localisation du service. Elle est définie par des coordonnées [x, y]
      required: true
      schema:
        type: Point
    titre:
      name: titre
      in: header 
      description: Le titre du service que l'user provider peut choisir librement
      required: true
      schema:
        type: String
    type:
      name: type
      in: header 
      description: C'est la catégorie du service
      required: true
      schema:
        type: String
        enum: ['Assistance', 'Promenade', 'Jardinage', 'Prêt']
    date:
      name: date
      in: header 
      description: La date que le service doit être accompli (choisi par le user provider)
      required: true
      schema:
        type: date
    reciever:
      name: reciever
      in: header
      description: L'user reciever (ne peut pas être égal au user provider)
      required: true
      schema:
        type: string
    provider:
      name: provider
      in: header 
      description: L'user provider
      required: true
      schema:
        type: string
    relatedService:
      name: relatedService
      in: header 
      description: Le service lié au rdv
      required: true
      schema:
        type: string
    isAccepted:
      name: isAccepted
      in: header 
      description: il passe au true quand l'user reciever accepte le rdv
      required: true
      schema:
        type: boolean
  schemas:
    user_id:
      title: _id
      type: string
      example: 636cc80cc2f4409e44b1ccf3
    name:
      title: name
      type: string
      example: Taya Licorne
    email:
      title: email
      type: string
      example: taya@arcenciel.ch
    password:
      title: password
      type: string
      example: '1234'
    location:
      title: location
      type: object
      example:
        type:
          Point
        coordinates:
        - '-73.856077'
        - '40.848447'
    titre:
      title: titre
      type: string
      example: '3 chiens à balader'
    type:
      title: titre
      type: string
      description: Groupe de types pour les services ('Assistance', 'Promenade', 'Jardinage', 'Prêt', 'Autres')
      example: Promenade
    date:
      title: titre
      type: date
      example: '2022-12-04T00:00:00.000Z'
